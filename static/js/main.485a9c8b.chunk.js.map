{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","Container","fluid","style","margin","padding","Row","noGutters","height","width","Col","Button","variant","Card","className","position","top","right","Body","Title","Text","Link","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPA6DeA,MA1Df,WACE,OACE,kBAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,MAAO,CAAEC,OAAQ,EAAGC,QAAS,IAC5C,kBAACC,EAAA,EAAD,CACEC,WAAW,EACXJ,MAAO,CAAEK,OAAQ,OAAQC,MAAO,OAAQL,OAAQ,IAEhD,kBAACM,EAAA,EAAD,CAAKP,MAAO,CAAEE,QAAS,IACrB,kBAACM,EAAA,EAAD,CAAQC,QAAQ,UAAUT,MAAO,CAAEK,OAAQ,OAAQC,MAAO,SAA1D,WAIF,kBAACC,EAAA,EAAD,CAAKP,MAAO,CAAEE,QAAS,IACrB,kBAACM,EAAA,EAAD,CAAQC,QAAQ,YAAYT,MAAO,CAAEK,OAAQ,OAAQC,MAAO,SAA5D,oBAKJ,kBAACH,EAAA,EAAD,CACEC,WAAW,EACXJ,MAAO,CAAEK,OAAQ,OAAQC,MAAO,OAAQL,OAAQ,IAEhD,kBAACM,EAAA,EAAD,CAAKP,MAAO,CAAEE,QAAS,IACrB,kBAACM,EAAA,EAAD,CAAQC,QAAQ,UAAUT,MAAO,CAAEK,OAAQ,OAAQC,MAAO,SAA1D,UAIF,kBAACC,EAAA,EAAD,CAAKP,MAAO,CAAEE,QAAS,IACrB,kBAACM,EAAA,EAAD,CAAQC,QAAQ,SAAST,MAAO,CAAEK,OAAQ,OAAQC,MAAO,SAAzD,WAKJ,kBAACI,EAAA,EAAD,CACEC,UAAU,cACVX,MAAO,CACLY,SAAU,WACVC,IAAK,OACLC,MAAO,OACPR,MAAO,UAGT,kBAACI,EAAA,EAAKK,KAAN,KACE,kBAACL,EAAA,EAAKM,MAAN,8BACA,kBAACN,EAAA,EAAKO,KAAN,kKAKA,kBAACP,EAAA,EAAKQ,KAAN,CAAWC,KAAK,KAAhB,SACA,kBAACT,EAAA,EAAKQ,KAAN,CAAWC,KAAK,KAAhB,YACA,kBAACT,EAAA,EAAKQ,KAAN,CAAWC,KAAK,KAAhB,UC1CUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.485a9c8b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { Container, Row, Col, Button, Card } from \"react-bootstrap\";\nfunction App() {\n  return (\n    <Container fluid style={{ margin: 0, padding: 0 }}>\n      <Row\n        noGutters={false}\n        style={{ height: \"50vh\", width: \"100%\", margin: 0 }}\n      >\n        <Col style={{ padding: 0 }}>\n          <Button variant=\"primary\" style={{ height: \"100%\", width: \"100%\" }}>\n            Travel\n          </Button>\n        </Col>\n        <Col style={{ padding: 0 }}>\n          <Button variant=\"secondary\" style={{ height: \"100%\", width: \"100%\" }}>\n            Recommendation\n          </Button>\n        </Col>\n      </Row>\n      <Row\n        noGutters={false}\n        style={{ height: \"50vh\", width: \"100%\", margin: 0 }}\n      >\n        <Col style={{ padding: 0 }}>\n          <Button variant=\"success\" style={{ height: \"100%\", width: \"100%\" }}>\n            Goals\n          </Button>\n        </Col>\n        <Col style={{ padding: 0 }}>\n          <Button variant=\"danger\" style={{ height: \"100%\", width: \"100%\" }}>\n            About\n          </Button>\n        </Col>\n      </Row>\n      <Card\n        className=\"text-center\"\n        style={{\n          position: \"absolute\",\n          top: \"35vh\",\n          right: \"80vh\",\n          width: \"400px\",\n        }}\n      >\n        <Card.Body>\n          <Card.Title>Hi, I'm Brandon Yuan!</Card.Title>\n          <Card.Text>\n            I'm a graduating CS major at Georgia Tech. I wanted to create a\n            unique portfolio to display who I am, what I want to do, and how\n            I'll accomplish my goals\n          </Card.Text>\n          <Card.Link href=\"#\">Insta</Card.Link>\n          <Card.Link href=\"#\">LinkedIn</Card.Link>\n          <Card.Link href=\"#\">FB</Card.Link>\n        </Card.Body>\n      </Card>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}